from ai_pkg.planning import PlanningProblem, Action, goal_test
from ai_pkg.utils import expr

def double_tennis_problem():
  initial = 'At(A, LeftBaseLine) & At(B, RightNet) & Approaching(Ball, RightBaseLine) & Team(A, B) & Team(B, A)'

  goal = 'Returned(Ball) & At(a, RightNet) & At(a, LeftNet)' # mengembalikan bola, kalau memenuhi kondisi: True #

  action = [Action('Hit(player, Ball, loc)',
                  precond='Approaching(Ball, loc) & At(player, loc)', # precond - effect : sebab/trigger - akibat/efek #
                  effect='Returned(Ball)'),

            Action('Go(player, to, loc)',
                  precond='At(player, loc)',
                  effect='At(player, to)')]

  return PlanningProblem(init=initial, goals=goal, actions=action)

if __name__== '__main__':
  p = double_tennis_problem()
#   print(goal_test(p.goals, p.init))

   # bagian yang penting #
  solution = [expr("Go(A, RightBaseLine, LeftBaseLine)"), # cara bacanya: pemain A dari left baseline -> Go (pergi) -> right baseline #
              expr("Hit(A, Ball, RightBaseLine)"),
              expr("Go(A, LeftNet, RightBaseLine)")] # pemain A dari right baseline -> Go (pergi) -> right baseline #

  for action in solution:
    p.act(action)
  print(goal_test(p.goals, p.init))

# Baseline -> posisi dimana pemain tenis ada di belakang
# Net 
# NoOp -> gada pergerakan/pemain yang idle/ diem aja
# Hit -> ketika pemain memukul bola
# Go -> pemain pindah #
